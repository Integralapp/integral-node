/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { IntegralApi } from "@integralapi/node";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Logs {
    interface Options {
        environment?: environments.IntegralApiEnvironment | string;
        apiKey: core.Supplier<string>;
        integralApplicationId: core.Supplier<string>;
    }
}

export class Logs {
    constructor(private readonly options: Logs.Options) {}

    /**
     * Returns back paginated list of logs for a given application, with minimum of 1 log and maximum of 100 logs per request
     *
     */
    public async getLogsByApplication(
        request: IntegralApi.GetLogsByApplication = {}
    ): Promise<IntegralApi.GetLogsByApplicationResponse> {
        const { limit, startingAfter, userId } = request;
        const _queryParams = new URLSearchParams();
        if (limit != null) {
            _queryParams.append("limit", limit.toString());
        }

        if (startingAfter != null) {
            _queryParams.append("starting_after", startingAfter);
        }

        if (userId != null) {
            _queryParams.append("user_id", userId);
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.IntegralApiEnvironment.Production, "/logs"),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "Integral-Application-Id": await core.Supplier.get(this.options.integralApplicationId),
            },
            contentType: "application/json",
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.GetLogsByApplicationResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.IntegralApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.IntegralApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.IntegralApiTimeoutError();
            case "unknown":
                throw new errors.IntegralApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    private async _getAuthorizationHeader() {
        const value = await core.Supplier.get(this.options.apiKey);
        if (value != null) {
            return value;
        }

        return undefined;
    }
}
