/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { IntegralApi } from "@integralapi/node";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace ApiKeys {
    interface Options {
        environment?: environments.IntegralApiEnvironment | string;
        apiKey: core.Supplier<string>;
        integralApplicationId: string;
    }
}

export class ApiKeys {
    constructor(private readonly options: ApiKeys.Options) {}

    /**
     * This endpoint is used to generate an API key for a given user.  This API key is for the Application User it is assigned for only, and only for your API.
     *
     */
    public async generate(request: IntegralApi.GenerateApiKeyRequest): Promise<IntegralApi.ApiKey> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.IntegralApiEnvironment.Production, "/key/create"),
            method: "POST",
            headers: {
                "Integral-Application-Id": this.options.integralApplicationId,
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
            body: await serializers.GenerateApiKeyRequest.jsonOrThrow(request),
        });
        if (_response.ok) {
            return await serializers.ApiKey.parseOrThrow(_response.body, { allowUnknownKeys: true });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.IntegralApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.IntegralApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.IntegralApiTimeoutError();
            case "unknown":
                throw new errors.IntegralApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Retrieve all API keys for the given Application User
     *
     */
    public async retrieve(userId: string): Promise<IntegralApi.ApiKey[]> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.IntegralApiEnvironment.Production, `/key/${userId}`),
            method: "GET",
            headers: {
                "Integral-Application-Id": this.options.integralApplicationId,
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
        });
        if (_response.ok) {
            return await serializers.apiKeys.retrieve.Response.parseOrThrow(_response.body, { allowUnknownKeys: true });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.IntegralApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.IntegralApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.IntegralApiTimeoutError();
            case "unknown":
                throw new errors.IntegralApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Given an API Key generated for your application's user, this endpoint allows you to pause the API key.
     *
     */
    public async pause(request: IntegralApi.PauseApiKeyRequest): Promise<IntegralApi.ApiKey> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.IntegralApiEnvironment.Production, "/key/pause"),
            method: "PUT",
            headers: {
                "Integral-Application-Id": this.options.integralApplicationId,
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
            body: await serializers.PauseApiKeyRequest.jsonOrThrow(request),
        });
        if (_response.ok) {
            return await serializers.ApiKey.parseOrThrow(_response.body, { allowUnknownKeys: true });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.IntegralApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.IntegralApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.IntegralApiTimeoutError();
            case "unknown":
                throw new errors.IntegralApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * This endpoint is used to revoke a key.
     * Revoking an API key means making all of it's content and previous data still persistent, but no longer usable.
     * Once a key is revoked, it can never be set back to normal.
     *
     */
    public async revoke(request: IntegralApi.RevokeApiKeyRequest): Promise<IntegralApi.ApiKey> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.IntegralApiEnvironment.Production, "/key/revoke"),
            method: "DELETE",
            headers: {
                "Integral-Application-Id": this.options.integralApplicationId,
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
            body: await serializers.RevokeApiKeyRequest.jsonOrThrow(request),
        });
        if (_response.ok) {
            return await serializers.ApiKey.parseOrThrow(_response.body, { allowUnknownKeys: true });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.IntegralApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.IntegralApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.IntegralApiTimeoutError();
            case "unknown":
                throw new errors.IntegralApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
