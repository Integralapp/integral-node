/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { IntegralApi } from "@integralapi/node";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace ApiKeys {
    interface Options {
        environment?: environments.IntegralApiEnvironment | string;
        apiKey: core.Supplier<string>;
        integralApplicationId: core.Supplier<string>;
    }
}

export class ApiKeys {
    constructor(private readonly options: ApiKeys.Options) {}

    /**
     * This endpoint is used to generate an API key for a given user.  This API key is for the Application User it is assigned for only, and only for your API.
     *
     */
    public async generate(request: IntegralApi.GenerateApiKeyRequest): Promise<IntegralApi.ApiKey> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.IntegralApiEnvironment.Production, "/key/create"),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "Integral-Application-Id": await core.Supplier.get(this.options.integralApplicationId),
            },
            contentType: "application/json",
            body: await serializers.GenerateApiKeyRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
        });
        if (_response.ok) {
            return await serializers.ApiKey.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.IntegralApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.IntegralApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.IntegralApiTimeoutError();
            case "unknown":
                throw new errors.IntegralApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Retrieve a paginated list of production API keys for a given Application User
     *
     */
    public async retrieveProduction(
        userId: string,
        request: IntegralApi.RetrieveProductionApplicationUserApiKeys = {}
    ): Promise<IntegralApi.ApiKey[]> {
        const { limit, after } = request;
        const _queryParams = new URLSearchParams();
        if (limit != null) {
            _queryParams.append("limit", limit.toString());
        }

        if (after != null) {
            _queryParams.append("after", after);
        }

        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.IntegralApiEnvironment.Production,
                `/key/${userId}/production`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "Integral-Application-Id": await core.Supplier.get(this.options.integralApplicationId),
            },
            contentType: "application/json",
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.apiKeys.retrieveProduction.Response.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.IntegralApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.IntegralApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.IntegralApiTimeoutError();
            case "unknown":
                throw new errors.IntegralApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Retrieve a paginated list of sandbox API keys for a given Application User
     *
     */
    public async retrieveSandbox(
        userId: string,
        request: IntegralApi.RetrieveSandboxApplicationUserApiKeys = {}
    ): Promise<IntegralApi.ApiKey[]> {
        const { limit, after } = request;
        const _queryParams = new URLSearchParams();
        if (limit != null) {
            _queryParams.append("limit", limit.toString());
        }

        if (after != null) {
            _queryParams.append("after", after);
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.IntegralApiEnvironment.Production, `/key/${userId}`),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "Integral-Application-Id": await core.Supplier.get(this.options.integralApplicationId),
            },
            contentType: "application/json",
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.apiKeys.retrieveSandbox.Response.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.IntegralApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.IntegralApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.IntegralApiTimeoutError();
            case "unknown":
                throw new errors.IntegralApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Given an API Key generated for your application's user, this endpoint allows you to pause the API key (temporarily stopping any API requests from being processed on it).
     *
     */
    public async pause(request: IntegralApi.PauseApiKeyRequest): Promise<IntegralApi.ApiKey> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.IntegralApiEnvironment.Production, "/key/pause"),
            method: "PUT",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "Integral-Application-Id": await core.Supplier.get(this.options.integralApplicationId),
            },
            contentType: "application/json",
            body: await serializers.PauseApiKeyRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
        });
        if (_response.ok) {
            return await serializers.ApiKey.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.IntegralApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.IntegralApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.IntegralApiTimeoutError();
            case "unknown":
                throw new errors.IntegralApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Given an API Key generated for your application's user, this endpoint allows you to unpause the given API key.
     *
     */
    public async unpause(request: IntegralApi.UnpauseApiKeyRequest): Promise<IntegralApi.ApiKey> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.IntegralApiEnvironment.Production, "/key/unpause"),
            method: "PUT",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "Integral-Application-Id": await core.Supplier.get(this.options.integralApplicationId),
            },
            contentType: "application/json",
            body: await serializers.UnpauseApiKeyRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
        });
        if (_response.ok) {
            return await serializers.ApiKey.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.IntegralApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.IntegralApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.IntegralApiTimeoutError();
            case "unknown":
                throw new errors.IntegralApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * This endpoint is used to revoke a key.
     * Revoking an API key makes all of the key's data read only (logs, events, and errors), but no longer able to continue making requests.
     * Once a key is revoked, it can never be used to make an API request again.
     *
     */
    public async revoke(request: IntegralApi.RevokeApiKeyRequest): Promise<IntegralApi.ApiKey> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.IntegralApiEnvironment.Production, "/key/revoke"),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "Integral-Application-Id": await core.Supplier.get(this.options.integralApplicationId),
            },
            contentType: "application/json",
            body: await serializers.RevokeApiKeyRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
        });
        if (_response.ok) {
            return await serializers.ApiKey.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.IntegralApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.IntegralApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.IntegralApiTimeoutError();
            case "unknown":
                throw new errors.IntegralApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * This endpoint allows you to set a time for the given key to be revoked (at given time intervals).  It also creates a new key that holds all the previous key's logs and information, to allow you to continue making requests with it.
     *
     */
    public async rotate(request: IntegralApi.RotateApiKeyRequest): Promise<IntegralApi.ApiKey> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.IntegralApiEnvironment.Production, "/key/rotate"),
            method: "PUT",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "Integral-Application-Id": await core.Supplier.get(this.options.integralApplicationId),
            },
            contentType: "application/json",
            body: await serializers.RotateApiKeyRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
        });
        if (_response.ok) {
            return await serializers.ApiKey.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.IntegralApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.IntegralApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.IntegralApiTimeoutError();
            case "unknown":
                throw new errors.IntegralApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    private async _getAuthorizationHeader() {
        const value = await core.Supplier.get(this.options.apiKey);
        if (value != null) {
            return value;
        }

        return undefined;
    }
}
