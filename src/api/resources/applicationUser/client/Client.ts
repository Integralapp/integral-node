/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { IntegralApi } from "@integralapi/node";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace ApplicationUser {
    interface Options {
        environment?: environments.IntegralApiEnvironment | string;
        apiKey: core.Supplier<string>;
        integralApplicationId: core.Supplier<string>;
    }
}

export class ApplicationUser {
    constructor(private readonly options: ApplicationUser.Options) {}

    /**
     * Use this endpoint to create an application user. With an application user, you define an 'API key owner' that holds top level information that is constant for all API keys made for a user
     *
     */
    public async create(
        request: IntegralApi.CreateApplicationUser
    ): Promise<IntegralApi.ApplicationUserCreateResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.IntegralApiEnvironment.Production, "/user"),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "Integral-Application-Id": await core.Supplier.get(this.options.integralApplicationId),
            },
            contentType: "application/json",
            body: await serializers.CreateApplicationUser.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
        });
        if (_response.ok) {
            return await serializers.ApplicationUserCreateResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.IntegralApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.IntegralApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.IntegralApiTimeoutError();
            case "unknown":
                throw new errors.IntegralApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * This endpoint takes in an Application User's ID and returns back relevant information about the user
     */
    public async get(userId: string): Promise<IntegralApi.ApplicationUser> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.IntegralApiEnvironment.Production, `/user/${userId}`),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "Integral-Application-Id": await core.Supplier.get(this.options.integralApplicationId),
            },
            contentType: "application/json",
        });
        if (_response.ok) {
            return await serializers.ApplicationUser.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.IntegralApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.IntegralApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.IntegralApiTimeoutError();
            case "unknown":
                throw new errors.IntegralApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    private async _getAuthorizationHeader() {
        const value = await core.Supplier.get(this.options.apiKey);
        if (value != null) {
            return value;
        }

        return undefined;
    }
}
