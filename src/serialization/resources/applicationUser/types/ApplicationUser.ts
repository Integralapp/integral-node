/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import { IntegralApi } from "@integralapi/node";
import * as core from "../../../../core";

export const ApplicationUser: core.serialization.ObjectSchema<
    serializers.ApplicationUser.Raw,
    IntegralApi.ApplicationUser
> = core.serialization.object({
    id: core.serialization.string(),
    createdAt: core.serialization.string(),
    updatedAt: core.serialization.string(),
    deletedAt: core.serialization.string().optional(),
    applicationUserForeignId: core.serialization.string(),
    metadata: core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
    applicationRole: core.serialization.lazyObject(async () => (await import("../../..")).ApplicationRole),
    application: core.serialization.lazyObject(async () => (await import("../../..")).Application),
});

export declare namespace ApplicationUser {
    interface Raw {
        id: string;
        createdAt: string;
        updatedAt: string;
        deletedAt?: string | null;
        applicationUserForeignId: string;
        metadata?: Record<string, unknown> | null;
        applicationRole: serializers.ApplicationRole.Raw;
        application: serializers.Application.Raw;
    }
}
