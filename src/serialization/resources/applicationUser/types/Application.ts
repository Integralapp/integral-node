/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import { IntegralApi } from "@integralapi/node";
import * as core from "../../../../core";

export const Application: core.serialization.ObjectSchema<serializers.Application.Raw, IntegralApi.Application> =
    core.serialization.object({
        id: core.serialization.string(),
        createdAt: core.serialization.string(),
        updatedAt: core.serialization.string(),
        deletedAt: core.serialization.string().optional(),
        name: core.serialization.string(),
        description: core.serialization.string(),
        publicId: core.serialization.string(),
        organization: core.serialization.lazyObject(async () => (await import("../../..")).Organization),
        baseUrl: core.serialization.lazyObject(async () => (await import("../../..")).ApplicationBaseUrl),
        ipRateLimit: core.serialization.number(),
        amountPerInterval: core.serialization.string().optional(),
        timeInterval: core.serialization.string(),
    });

export declare namespace Application {
    interface Raw {
        id: string;
        createdAt: string;
        updatedAt: string;
        deletedAt?: string | null;
        name: string;
        description: string;
        publicId: string;
        organization: serializers.Organization.Raw;
        baseUrl: serializers.ApplicationBaseUrl.Raw;
        ipRateLimit: number;
        amountPerInterval?: string | null;
        timeInterval: string;
    }
}
