/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import { IntegralApi } from "@integralapi/node";
import * as core from "../../../../core";

export const ApiKey: core.serialization.ObjectSchema<serializers.ApiKey.Raw, IntegralApi.ApiKey> =
    core.serialization.object({
        id: core.serialization.string(),
        createdAt: core.serialization.string(),
        updatedAt: core.serialization.string(),
        deletedAt: core.serialization.string(),
        apiKey: core.serialization.string(),
        isPaused: core.serialization.boolean(),
        isRevoked: core.serialization.boolean(),
        isRotatedOff: core.serialization.boolean(),
        numOfRequest: core.serialization.number(),
        firstTimeRequest: core.serialization.string(),
        applicationUser: core.serialization.lazyObject(async () => (await import("../../..")).ApplicationUser),
    });

export declare namespace ApiKey {
    interface Raw {
        id: string;
        createdAt: string;
        updatedAt: string;
        deletedAt: string;
        apiKey: string;
        isPaused: boolean;
        isRevoked: boolean;
        isRotatedOff: boolean;
        numOfRequest: number;
        firstTimeRequest: string;
        applicationUser: serializers.ApplicationUser.Raw;
    }
}
