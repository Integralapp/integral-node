/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import { IntegralApi } from "@integralapi/node";
import * as core from "../../../../core";

export const IdempotencyKeyType: core.serialization.ObjectSchema<
    serializers.IdempotencyKeyType.Raw,
    IntegralApi.IdempotencyKeyType
> = core.serialization.object({
    id: core.serialization.string(),
    createdAt: core.serialization.string(),
    updatedAt: core.serialization.string(),
    deletedAt: core.serialization.string().optional(),
    key: core.serialization.string(),
    endpoint: core.serialization.record(core.serialization.string(), core.serialization.unknown()),
    expiresAt: core.serialization.string(),
    apiKey: core.serialization.record(core.serialization.string(), core.serialization.unknown()),
    responseStatusCode: core.serialization.number().optional(),
    responseBody: core.serialization.record(core.serialization.string(), core.serialization.unknown()),
});

export declare namespace IdempotencyKeyType {
    interface Raw {
        id: string;
        createdAt: string;
        updatedAt: string;
        deletedAt?: string | null;
        key: string;
        endpoint: Record<string, unknown>;
        expiresAt: string;
        apiKey: Record<string, unknown>;
        responseStatusCode?: number | null;
        responseBody: Record<string, unknown>;
    }
}
