/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import { IntegralApi } from "@integralapi/node";
import * as core from "../../../../core";

export const RequestType: core.serialization.ObjectSchema<serializers.RequestType.Raw, IntegralApi.RequestType> =
    core.serialization.object({
        id: core.serialization.string(),
        createdAt: core.serialization.string(),
        updatedAt: core.serialization.string(),
        deletedAt: core.serialization.string().optional(),
        userApiKey: core.serialization.record(core.serialization.string(), core.serialization.unknown()),
        route: core.serialization.string(),
        method: core.serialization.string(),
        headers: core.serialization.record(core.serialization.string(), core.serialization.unknown()),
        traceback: core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
        ip: core.serialization.string(),
        isSandbox: core.serialization.boolean(),
        metadata: core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
        responseStatusCode: core.serialization.number(),
        responseBody: core.serialization.record(core.serialization.string(), core.serialization.unknown()),
    });

export declare namespace RequestType {
    interface Raw {
        id: string;
        createdAt: string;
        updatedAt: string;
        deletedAt?: string | null;
        userApiKey: Record<string, unknown>;
        route: string;
        method: string;
        headers: Record<string, unknown>;
        traceback?: Record<string, unknown> | null;
        ip: string;
        isSandbox: boolean;
        metadata?: Record<string, unknown> | null;
        responseStatusCode: number;
        responseBody: Record<string, unknown>;
    }
}
