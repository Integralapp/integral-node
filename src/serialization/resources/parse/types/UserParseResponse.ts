/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import { IntegralApi } from "@integralapi/node";
import * as core from "../../../../core";

export const UserParseResponse: core.serialization.ObjectSchema<
    serializers.UserParseResponse.Raw,
    IntegralApi.UserParseResponse
> = core.serialization.object({
    integralId: core.serialization.string(),
    metadata: core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
    userForeignId: core.serialization.string(),
    isAllowlistedOnEndpoint: core.serialization.boolean().optional(),
    createdAt: core.serialization.string(),
    updatedAt: core.serialization.string(),
    deletedAt: core.serialization.boolean(),
});

export declare namespace UserParseResponse {
    interface Raw {
        integralId: string;
        metadata?: Record<string, unknown> | null;
        userForeignId: string;
        isAllowlistedOnEndpoint?: boolean | null;
        createdAt: string;
        updatedAt: string;
        deletedAt: boolean;
    }
}
